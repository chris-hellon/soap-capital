@page "/account/forgot-password"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorTemplater
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SoapCapital.Application.Mailing
@using SoapCapital.Infrastructure.Identity
@using SoapCapital.Website.EmailTemplates
@using Stripe.Climate

@inject UserManager<ApplicationUser> UserManager
@inject IMailService MailService
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageHeaderTitle Title="Forgot your password?"/>

<MudContainer MaxWidth="MaxWidth.Small" Class="pt-8">
    <MudPaper Elevation="25" Class="pa-8">
        <div class="fsh-center-text">
            <MudText Typo="Typo.body1" Align="Align.Center">Enter your email.</MudText>
        </div>
        
        <MudDivider Class="mt-5 mb-5"></MudDivider>

        <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="forgot-password">
            <MudGrid Spacing="1">
                <DataAnnotationsValidator/>
                <StatusMessage Message="@_errorMessage"/>
                
                <MudItem xs="12">
                    <div class="mud-input-control mud-input-input-control">
                        <div class="mud-input-control-input-container">
                            <div class="mud-input mud-input-outlined">
                                <InputText @bind-Value="Input.Email" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="username" aria-required="true" placeholder="Email"/>
                                <div class="mud-input-adornment mud-input-adornment-end"></div>
                                <div class="mud-input-outlined-border"></div>
                            </div>
                        </div>
                    </div>

                    <ValidationMessage For="() => Input.Email" class="mud-input-helper-text mud-input-error"/>
                </MudItem>

                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" StartIcon="@Icons.Material.Filled.Login" Style="width: 100%;">
                       Reset password
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    private string? _errorMessage;
    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            _errorMessage = "Error: We were unable to find a user with this email address.";
        }
        else
        {
            var code = await UserManager.GeneratePasswordResetTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("account/reset-password").AbsoluteUri,
                new Dictionary<string, object?> {["code"] = code});

            var mailHtml = new ComponentRenderer<ResetPasswordTemplate>()
                .Set(c => c.Model,
                    callbackUrl)
                .Render();

            if (user.Email != null)
            {
                var mailRequest = new MailRequest(
                    to: [user.Email],
                    subject:"Reset Password",
                    body: mailHtml);
        
                await MailService.SendAsync(mailRequest);
                RedirectManager.RedirectTo("account/forgot-password-confirmation");   
            }

            _errorMessage = "Error: We were unable to find a user with this email address.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";
    }

}