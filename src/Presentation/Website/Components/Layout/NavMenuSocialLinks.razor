@using Microsoft.Extensions.Options
@using SoapCapital.Application.Catalog.Subscriptions.Dto
@using SoapCapital.Application.Solana.Wallet
@using SoapCapital.Infrastructure.Configuration
@inject IOptions<AppSettings> AppSettings
@inject IWalletService WalletService

<AuthorizeView>
    <NotAuthorized>
        <MudButton OnClick="SelectWallet" Variant="Variant.Text" Style="padding:6px 6px !important;" IconClass="rounded" StartIcon="@CustomIcons.Tyrel" Color="@(IsDarkMode ? Color.Tertiary : Color.Dark)" Size="Size.Small" Class="me-3 tyrel-wallet-connect">$tyrel</MudButton>
    </NotAuthorized>
</AuthorizeView>

@if (AppSettings.Value.SocialLinks.Any())
{
    foreach (var socialLink in AppSettings.Value.SocialLinks)
    {
        if (socialLink.RequiresAuth.HasValue && socialLink.RequiresAuth.Value)
        {
            if (!UserIsSignedIn)
                continue;
        }

        var startIcon = socialLink.IconClass switch
        {
            "fa-twitter" => Icons.Custom.Brands.Twitter,
            "fa-youtube" => Icons.Custom.Brands.YouTube,
            "fa-substack" => CustomIcons.SubStack,
            "fa-discord" => Icons.Custom.Brands.Discord,
            _ => string.Empty
        };

        if (socialLink.IconClass == "fa-discord")
        {
            if (UserSubscription != null && UserSubscription.PackageId != 5 && UserSubscription.PackageId != 6)
            {
                <MudIconButton Color="@(IsDarkMode ? Color.Tertiary : Color.Dark)" Href="@socialLink.Url" Target="_blank" Icon="@startIcon" Size="Size.Small" Class="@($"{(socialLink != AppSettings.Value.SocialLinks.Last() ? "me-3" : "")}{(socialLink.IconClass == "fa-substack" ? "substack-icon" : "")}")"/>
            }
        }
        else
        {
            <MudIconButton Color="@(IsDarkMode ? Color.Tertiary : Color.Dark)" Href="@socialLink.Url" Target="_blank" Icon="@startIcon" Size="Size.Small" Class="@($"{(socialLink != AppSettings.Value.SocialLinks.Last() ? "me-3" : "")}{(socialLink.IconClass == "fa-substack" ? "substack-icon" : "")}")"/>
        }
    }
}

@code {
    [Parameter] public bool UserIsSignedIn { get; set; }
    [Parameter] public bool IsDarkMode { get; set; }
    [Parameter] public SubscriptionDto? UserSubscription { get; set; }
    
    private void SelectWallet()
    {
        var parameters = new DialogParameters
        {
            {nameof(Dialogs.SelectWalletProvider.Adapters), WalletService.WalletProviders}
        };

        var options = new DialogOptions {CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true};
        DialogService.Show<Dialogs.SelectWalletProvider>("Select Provider", parameters, options);
    }
}