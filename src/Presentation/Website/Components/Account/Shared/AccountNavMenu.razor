@using SoapCapital.Infrastructure.Configuration
@using Microsoft.Extensions.Options
@using SoapCapital.Application.Catalog.Subscriptions.Dto
@using SoapCapital.Application.Catalog.Subscriptions.Queries
@using SoapCapital.Shared.Authorization

@implements IDisposable

@inject NavigationManager NavigationManager
@inject IOptions<AppSettings> AppSettings
@inject ICurrentUser CurrentUser
@inject ISubscriptionsService SubscriptionsService

<MudAppBar Elevation="25" Fixed="true" Class="@(NavbarService.IsTransparent ? "transparent-app-bar" : "no-transparency")">
    <div class="d-flex align-center flex-grow-1 d-md-none">
        <MudButton Href="/" Class="navbarBrand">
            <MudImage Height="50" Src="https://paperstreetsoap.azureedge.net/site/logo.png"></MudImage>
        </MudButton>
        <MudLink Href="/" Class="me-5" Color="Color.Tertiary" Underline="Underline.None" Typo="Typo.h6">
            Home
        </MudLink>
        <AuthorizeView>
            <Authorized>
                @if (UserSubscription != null)
                {
                    <MudLink Href="/members/latest-review" Color="Color.Tertiary" Underline="Underline.None" Typo="Typo.h6">
                        Members Area
                    </MudLink>
                }
                else
                {
                    <MudLink Href="/account/subscription" Color="Color.Tertiary" Underline="Underline.None" Typo="Typo.h6">
                        Subscription
                    </MudLink>
                }
            </Authorized>
        </AuthorizeView>
    </div>
    <div class="d-none d-md-flex align-center flex-grow-1">
        <MudButton Href="/" Class="navbarBrand me-5">
            <MudImage Height="50" Src="https://paperstreetsoap.azureedge.net/site/logo.png"></MudImage>
        </MudButton>
        @if (AppSettings.Value.NavigationLinks.Any())
        {
            <MudLink Href="/" Class="me-5" Color="Color.Tertiary" Underline="Underline.None" Typo="Typo.h6">
                Home
            </MudLink>

            <AuthorizeView>
                <Authorized>
                    @if (UserSubscription != null)
                    {
                        <MudLink Href="/members/latest-review" Color="Color.Tertiary" Underline="Underline.None" Typo="Typo.h6">
                            Members Area
                        </MudLink>
                    }
                    else
                    {
                        <MudLink Href="/account/subscription" Color="Color.Tertiary" Underline="Underline.None" Typo="Typo.h6">
                            Subscription
                        </MudLink>
                    }
                </Authorized>
            </AuthorizeView>

            <MudSpacer/>

            @if (AppSettings.Value.SocialLinks.Any())
            {
                var userIsSignedIn = CurrentUser.IsAuthenticated();

                foreach (var socialLink in AppSettings.Value.SocialLinks)
                {
                    if (socialLink.RequiresAuth.HasValue && socialLink.RequiresAuth.Value)
                    {
                        if (!userIsSignedIn)
                            continue;
                    }

                    var startIcon = socialLink.IconClass switch
                    {
                        "fa-twitter" => Icons.Custom.Brands.Twitter,
                        "fa-youtube" => Icons.Custom.Brands.YouTube,
                        "fa-substack" => CustomIcons.SubStack,
                        "fa-discord" => Icons.Custom.Brands.Discord,
                        _ => string.Empty
                    };

                    <MudIconButton Color="@(IsDarkMode ? Color.Tertiary : Color.Dark)" Href="@socialLink.Url" Target="_blank" Icon="@startIcon" Size="Size.Small" Class="@($"{(socialLink != AppSettings.Value.SocialLinks.Last() ? "me-3" : "")}{(socialLink.IconClass == "fa-substack" ? "substack-icon" : "")}")"/>
                }
            }

            <AuthorizeView>
                <Authorized>

                </Authorized>
                <NotAuthorized>
                    <MudButton Href="/login" Class="me-5 ms-5" Variant="Variant.Filled" Color="Color.Secondary">Log In</MudButton>
                    <MudButton Href="/choose-membership" Variant="Variant.Filled" Color="Color.Primary">Sign Up</MudButton>
                </NotAuthorized>
            </AuthorizeView>
        }
    </div>
</MudAppBar>


@code {
    private string? _currentUrl;

    [Parameter] public bool IsDarkMode { get; set; }
    private SubscriptionDto? UserSubscription { get; set; }

    private string GetActiveClass(string url)
    {
        var formattedUrl = url.Split("/");
        var formattedCurrentUrl = _currentUrl != null && _currentUrl.Contains("/") ? _currentUrl.Split("/")[0] : _currentUrl;

        return formattedCurrentUrl == formattedUrl[1] ? "active me-5" : "me-5";
    }

    protected override void OnInitialized()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = AuthState.GetAuthenticationStateAsync();

        if (authState.Result.User.Identity is not {IsAuthenticated: true}) return;

        var userId = authState.Result.User.GetUserId();
        var userSubscription = Task.Run(() => SubscriptionsService.GetUserSubscription(new GetUserSubscriptionRequest(userId)));

        UserSubscription = userSubscription.Result;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);

        NavbarService.ToggleNavbarTransparency(_currentUrl == "");

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}