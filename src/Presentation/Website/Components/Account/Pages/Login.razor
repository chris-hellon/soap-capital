@page "/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SoapCapital.Application.Catalog.Orders.Commands
@using SoapCapital.Application.Catalog.Subscriptions.Commands
@using SoapCapital.Application.Catalog.Subscriptions.Queries
@using SoapCapital.Application.Solana
@using SoapCapital.Application.Solana.Queries
@using SoapCapital.Infrastructure.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager
@inject ICurrentUser CurrentUser
@inject ISubscriptionsService SubscriptionsService
@inject IOrdersService OrdersService
@inject ISolanaService SolanaService

<PageHeaderTitle Title="Log In"/>

<MudContainer MaxWidth="MaxWidth.Small" Class="pt-8">
    <MudPaper Elevation="25" Class="pa-8">
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <MudGrid Spacing="1">
                <DataAnnotationsValidator/>
                <StatusMessage Message="@errorMessage"/>

                <MudItem xs="12">
                    <div class="mud-input-control mud-input-input-control">
                        <div class="mud-input-control-input-container">
                            <div class="mud-input mud-input-outlined">
                                <InputText @bind-Value="Input.Username" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="username" aria-required="true" placeholder="Username"/>
                                <div class="mud-input-adornment mud-input-adornment-end"></div>
                                <div class="mud-input-outlined-border"></div>
                            </div>
                        </div>
                    </div>

                    <ValidationMessage For="() => Input.Username" class="mud-input-helper-text mud-input-error"/>
                </MudItem>
                <MudItem xs="12">
                    <div class="mud-input-control mud-input-input-control">
                        <div class="mud-input-control-input-container">
                            <div class="mud-input mud-input-outlined">
                                <InputText @bind-Value="Input.Password" type="password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="password" aria-required="true" placeholder="Password"/>
                                <div class="mud-input-adornment mud-input-adornment-end"></div>
                                <div class="mud-input-outlined-border"></div>
                            </div>
                        </div>
                    </div>

                    <ValidationMessage For="() => Input.Password" class="mud-input-helper-text mud-input-error"/>
                </MudItem>

                <div class="d-flex justify-space-between flex-grow-1 mt-5 mb-5">
                    <MudItem xs="12" md="12">
                        <MudButton StartIcon="@Icons.Material.Filled.Login" Size="Size.Small" Link="/bybit-login">Bybit User?</MudButton>
                    </MudItem>
                    <MudItem xs="12" md="12">
                        <div class="d-flex justify-end">
                                                    <MudButton StartIcon="@Icons.Material.Filled.LockReset" Size="Size.Small" Link="/account/forgot-password">Forgot password?</MudButton>
                        </div>

                    </MudItem>
                </div>

                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" StartIcon="@Icons.Material.Filled.Login" Style="width: 100%;">
                        Sign In
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>


@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private LoginInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        if (!string.IsNullOrEmpty(ReturnUrl))
        {
            if (CurrentUser.IsAuthenticated())
            {
                NavigationManager.NavigateTo(ReturnUrl);
            }
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Username, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            if (string.IsNullOrEmpty(ReturnUrl))
            {
                ReturnUrl = "/members/latest-review";
            }

            // Check if the user has an active subscription, if not redirect to subscription page
            var user = await UserManager.FindByNameAsync(Input.Username);
            var userSubscription = await SubscriptionsService.GetUserSubscription(new GetUserSubscriptionRequest(user?.Id));
            
            if (userSubscription == null)
                ReturnUrl = "/account/subscription";

            if (!string.IsNullOrEmpty(user?.TyrelPublicKey))
            {
                try
                {
                    var tyrelUser = await SolanaService.GetTyrelBalance(new GetTyrelBalanceRequest(user.TyrelPublicKey));

                    if (!tyrelUser.Success)
                    {
                        if (userSubscription != null)
                            await SubscriptionsService.DeleteSubscription(new DeleteSubscriptionRequest(userSubscription.Id));
                    
                        ReturnUrl = "/account/subscription";
                    }
                    else if (userSubscription == null)
                    {
                        var orderId = await OrdersService.CreateOrder(new CreateOrderRequest(6, 0, user.Id, true));
                        await SubscriptionsService.CreateSubscription(new CreateSubscriptionRequest(user.Id, 6, orderId));
                    }
                }
                catch (Exception)
                {
                    if (userSubscription != null)
                        await SubscriptionsService.DeleteSubscription(new DeleteSubscriptionRequest(userSubscription.Id));
                    
                    ReturnUrl = "/account/subscription";
                }
            }
            
            Logger.LogInformation("User with ID '{UserId}' logged in", user?.Id);
            
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "/login-with-2fa",
                new() {["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe});
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    public class LoginInputModel
    {
        [Required] public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}