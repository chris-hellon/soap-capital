@page "/sign-up/{PackageName?}/{PaymentMethod?}"

@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using System.Globalization
@using Microsoft.AspNetCore.Identity
@using SoapCapital.Application.Catalog.Notifications.Commands
@using SoapCapital.Application.Catalog.Orders.Commands
@using SoapCapital.Application.Catalog.Packages.Dto
@using SoapCapital.Application.Catalog.Packages.Queries
@using SoapCapital.Application.Catalog.Subscriptions.Queries
@using SoapCapital.Application.Common.Extensions
@using SoapCapital.Application.OpenNode
@using SoapCapital.Application.OpenNode.Commands
@using SoapCapital.Application.Stripe
@using SoapCapital.Application.Stripe.Commands
@using SoapCapital.Infrastructure.Identity
@using SoapCapital.Shared.Authorization

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IPackagesService PackagesService
@inject IOrdersService OrdersService
@inject IOpenNodeService OpenNodeService
@inject IStripeService StripeService
@inject INotificationsService NotificationsService
@inject ISubscriptionsService SubscriptionsService

<PageHeaderTitle Title="Sign Up"/>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pt-8">
    <MudPaper Elevation="25" Class="pa-8 w-100">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <MudGrid Spacing="3">
                <DataAnnotationsValidator/>
                <StatusMessage Message="@Message"/>

                <MudItem lg="7" xs="12">
                    <MudGrid Spacing="1">
                        <MudItem xs="12">
                            <div class="mud-input-control mud-input-input-control">
                                <div class="mud-input-control-input-container">
                                    <div class="mud-input mud-input-outlined">
                                        <InputText @bind-Value="Input.Email" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="username" aria-required="true" placeholder="Email"/>
                                        <div class="mud-input-adornment mud-input-adornment-end"></div>
                                        <div class="mud-input-outlined-border"></div>
                                    </div>
                                </div>
                            </div>

                            <ValidationMessage For="() => Input.Email" class="mud-input-helper-text mud-input-error"/>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="mud-input-control mud-input-input-control">
                                <div class="mud-input-control-input-container">
                                    <div class="mud-input mud-input-outlined">
                                        <InputText @bind-Value="Input.Username" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="username" aria-required="true" placeholder="Username"/>
                                        <div class="mud-input-adornment mud-input-adornment-end"></div>
                                        <div class="mud-input-outlined-border"></div>
                                    </div>
                                </div>
                            </div>

                            <ValidationMessage For="() => Input.Username" class="mud-input-helper-text mud-input-error"/>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="mud-input-control mud-input-input-control">
                                <div class="mud-input-control-input-container">
                                    <div class="mud-input mud-input-outlined">
                                        <InputText @bind-Value="Input.DiscordUsername" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="username" aria-required="true" placeholder="Discord Username"/>
                                        <div class="mud-input-adornment mud-input-adornment-end"></div>
                                        <div class="mud-input-outlined-border"></div>
                                    </div>
                                </div>
                            </div>

                            <ValidationMessage For="() => Input.DiscordUsername" class="mud-input-helper-text mud-input-error"/>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="mud-input-control mud-input-input-control">
                                <div class="mud-input-control-input-container">
                                    <div class="mud-input mud-input-outlined">
                                        <InputText @bind-Value="Input.Password" type="password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="password" aria-required="true" placeholder="Password"/>
                                        <div class="mud-input-adornment mud-input-adornment-end"></div>
                                        <div class="mud-input-outlined-border"></div>
                                    </div>
                                </div>
                            </div>

                            <ValidationMessage For="() => Input.Password" class="mud-input-helper-text mud-input-error"/>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="mud-input-control mud-input-input-control">
                                <div class="mud-input-control-input-container">
                                    <div class="mud-input mud-input-outlined">
                                        <InputText @bind-Value="Input.ConfirmPassword" type="password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="confirm password" aria-required="true" placeholder="Confirm Password"/>
                                        <div class="mud-input-adornment mud-input-adornment-end"></div>
                                        <div class="mud-input-outlined-border"></div>
                                    </div>
                                </div>
                            </div>

                            <ValidationMessage For="() => Input.ConfirmPassword" class="mud-input-helper-text mud-input-error"/>
                        </MudItem>
                    </MudGrid>
                    <MudText Class="mt-5 mb-5">By signing up to Soap Capital, you agree to our <MudLink Href="/terms-and-conditions">Terms & Conditions</MudLink> and <MudLink Href="/terms-and-conditions">Disclaimer</MudLink>.</MudText>
                    <MudItem xs="12" Class="d-flex justify-center">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" StartIcon="@Icons.Material.Filled.Login" Style="width: 100%;">
                            Sign Up
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12" Class="d-flex justify-center mt-5">
                        <MudButton Href="/choose-membership" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Large" StartIcon="@Icons.Material.Filled.Login" Style="width: 100%;">
                            Change Package
                        </MudButton>
                    </MudItem>
                </MudItem>
                <MudItem lg="5" xs="12">
                    <MudText Typo="Typo.h5" GutterBottom="true">Order Summary</MudText>
                    <MudPaper Class="d-flex flex-column" Style="height:calc(100% - 35px)" Outlined="true">
                        <MudList Clickable="true">
                            <MudListItem Disabled="true" Icon="@(PaymentMethod == "bitcoin" ? CustomIcons.Bitcoin : Icons.Material.Filled.CreditCard)">
                                <div class="d-flex">
                                    <MudText>Payment Method</MudText>
                                    <MudText Inline="true" Class="ml-auto">@PaymentMethod?.Replace("-", " ").Replace("credit card", "Credit Card").Replace("bitcoin", "Bitcoin")</MudText>
                                </div>
                            </MudListItem>
                            <MudListItem Disabled="true" Icon="@Icons.Material.Filled.MiscellaneousServices">
                                @if (Package != null)
                                {
                                    <div class="d-flex">
                                        <MudText>@Package.Title</MudText>
                                        <MudText Class="ml-auto">@Package.Price.ToString("C", CultureInfo.GetCultureInfo("en-US"))</MudText>
                                    </div>
                                }
                            </MudListItem>
                        </MudList>
                        <div class="mt-auto">
                            <MudDivider/>
                            <div class="d-flex pa-4">
                                <MudText>Total:</MudText>
                                <MudText Class="ml-auto">
                                    @if (Package != null)
                                    {
                                        <b>@Package.Price.ToString("C", CultureInfo.GetCultureInfo("en-US"))</b>
                                    }
                                </MudText>
                            </div>
                        </div>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>


@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] [Parameter] public string? PackageName { get; set; }

    [SupplyParameterFromQuery] [Parameter] public string? PaymentMethod { get; set; }

    private PackageDto? Package { get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        if (PaymentMethod == null || PackageName == null)
            NavigationManager.NavigateTo("/choose-membership");

        var authState = await AuthState.GetAuthenticationStateAsync();
        if (authState.User.Identity is {IsAuthenticated: true})
        {
            var userSubscription = await SubscriptionsService.GetUserSubscription(new GetUserSubscriptionRequest(authState.User.GetUserId()));
            NavigationManager.NavigateTo(userSubscription != null ? "/members/latest-review" : "/account/subscription");
        }

        var packages = await PackagesService.GetPackages(new GetPackagesRequest(false));

        var packageDtos = packages as PackageDto[] ?? packages.ToArray();

        if (packageDtos.Any())
            Package = packageDtos.FirstOrDefault(p => p.Title.UrlFriendly() == PackageName);
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        if (Package != null)
        {
            user.DiscordUsername = Input.DiscordUsername;
            user.SignUpDate = DateTime.Now;

            await UserStore.SetUserNameAsync(user, Input.Username, CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
            var result = await UserManager.CreateAsync(user, Input.Password);

            if (!result.Succeeded)
            {
                _identityErrors = result.Errors;
                return;
            }

            await SignInManager.SignInAsync(user, isPersistent: false);

            var orderId = await OrdersService.CreateOrder(new CreateOrderRequest(Package.Id, Package.Price, user.Id, false));

            if (orderId == 0)
            {
                _identityErrors = new[] {new IdentityError {Code = "500", Description = "There was an error creating your Order, please Live Chat us for assistance."}};
                return;
            }

            var successUrl = $"{NavigationManager.BaseUri}account/my-orders/order-status/{orderId}";
            var cancelUrl = $"{NavigationManager.BaseUri}account/order-fail/{orderId}";

            if (orderId > 0)
            {
                if (PaymentMethod == "bitcoin")
                {
                    var webhookUrl = $"{NavigationManager.BaseUri}open-node-webhook/{orderId}";

                    var createChargeResponse = await OpenNodeService.CreateOpenNodeCharge(new CreateOpenNodeChargeRequest(
                        Package.Title,
                        Package.Price,
                        orderId,
                        user.UserName!,
                        user.Email!,
                        user.Email!,
                        successUrl,
                        webhookUrl));

                    if (createChargeResponse is {Data: not null} && !string.IsNullOrEmpty(createChargeResponse.Data.CheckoutUrl))
                    {
                        await OrdersService.UpdateOrder(new UpdateOrderRequest(orderId, createChargeResponse.Data?.Id, false, null));
                        Debug.Assert(createChargeResponse.Data != null, "createChargeResponse.Data != null");

                        await NotificationsService.CreateNotification(new CreateNotificationRequest("Your order has been processed. If you haven't yet completed your payment, click here to proceed.", createChargeResponse.Data.CheckoutUrl, false, user.Id));

                        NavigationManager.NavigateTo(createChargeResponse.Data.CheckoutUrl);
                    }
                    else
                    {
                        _identityErrors = new[] {new IdentityError {Code = "500", Description = "There was an error creating your Bitcoin Order, please Live Chat us for assistance."}};
                        return;
                    }
                }
                else
                {
                    var stripeSession = await StripeService.CreateStripeSession(new CreateStripeSessionRequest(Package.StripePriceId, successUrl, cancelUrl));
                    await NotificationsService.CreateNotification(new CreateNotificationRequest("Your order has been processed. If you haven't yet completed your payment, click here to proceed.", stripeSession.Url, false, user.Id));

                    await OrdersService.UpdateOrder(new UpdateOrderRequest(orderId, null, false, stripeSession.Id));
                    
                    NavigationManager.NavigateTo(stripeSession.Url);
                }
            }
        }

        RedirectManager.RedirectTo(ReturnUrl);
    }

    private static ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>) UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "Discord Username")]
        public string DiscordUsername { get; set; } = "";

        [Display(Name = "Bybit User Id")] public string? BybitId { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}