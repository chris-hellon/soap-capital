@page "/account/reset-password"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SoapCapital.Infrastructure.Identity

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageHeaderTitle Title="Reset password"/>

<MudContainer MaxWidth="MaxWidth.Small" Class="pt-8">
    <MudPaper Elevation="25" Class="pa-8">
        <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="reset-password">
            <MudGrid Spacing="1">
                <DataAnnotationsValidator/>
                <StatusMessage Message="@Message"/>

                <MudItem xs="12">
                    <div class="mud-input-control mud-input-input-control">
                        <div class="mud-input-control-input-container">
                            <div class="mud-input mud-input-outlined">
                                <InputText @bind-Value="Input.Email" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="username" aria-required="true" placeholder="Email"/>
                                <div class="mud-input-adornment mud-input-adornment-end"></div>
                                <div class="mud-input-outlined-border"></div>
                            </div>
                        </div>
                    </div>

                    <ValidationMessage For="() => Input.Email" class="mud-input-helper-text mud-input-error"/>
                </MudItem>
                <MudItem xs="12">
                    <div class="mud-input-control mud-input-input-control">
                        <div class="mud-input-control-input-container">
                            <div class="mud-input mud-input-outlined">
                                <InputText @bind-Value="Input.Password" type="password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="password" aria-required="true" placeholder="Password"/>
                                <div class="mud-input-adornment mud-input-adornment-end"></div>
                                <div class="mud-input-outlined-border"></div>
                            </div>
                        </div>
                    </div>

                    <ValidationMessage For="() => Input.Password" class="mud-input-helper-text mud-input-error"/>
                </MudItem>
                <MudItem xs="12">
                    <div class="mud-input-control mud-input-input-control">
                        <div class="mud-input-control-input-container">
                            <div class="mud-input mud-input-outlined">
                                <InputText @bind-Value="Input.ConfirmPassword" type="password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="password" aria-required="true" placeholder="Password"/>
                                <div class="mud-input-adornment mud-input-adornment-end"></div>
                                <div class="mud-input-outlined-border"></div>
                            </div>
                        </div>
                    </div>

                    <ValidationMessage For="() => Input.ConfirmPassword" class="mud-input-helper-text mud-input-error"/>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" StartIcon="@Icons.Material.Filled.Login" Style="width: 100%;">
                        Reset Password
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("account/invalid-password-reset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            identityErrors = new List<IdentityError>() {(new IdentityError()
            {
                Code = "404",
                Description = "Error: No user found with this email address."
            })};
        }
        else
        {
            var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
            if (result.Succeeded)
            {
                RedirectManager.RedirectTo("account/reset-password-confirmation");
            }
            
            identityErrors = result.Errors;
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required] public string Code { get; set; } = "";
    }

}