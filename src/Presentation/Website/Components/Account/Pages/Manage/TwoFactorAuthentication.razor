@page "/account/two-factor-authentication"

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using SoapCapital.Infrastructure.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<SectionContent SectionName="PageHeaderTitle">
    <PageHeaderTitle Title="Two Factor Authentication"/>
</SectionContent>

<StatusMessage/>

@if (canTrack)
{
    if (is2faEnabled)
    {
        if (isMachineRemembered)
        {
            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                <AntiforgeryToken/>
                <button type="submit" class="btn btn-primary">Forget this browser</button>
            </form>
        }
        
        <MudButton Href="/account/two-factor-authentication/disable-2fa" Color="Color.Primary" Class="mb-5" Variant="Variant.Filled">Disable 2FA</MudButton>
        <MudButton Href="/account/two-factor-authentication/generate-recovery-code" Color="Color.Secondary" Class="mb-5" Variant="Variant.Filled">Reset recovery codes</MudButton>
    }

    <MudText Typo="Typo.h5" Class="mb-5">Authenticator app</MudText>
    @if (!hasAuthenticator)
    {
        <MudButton Href="/account/two-factor-authentication/enable-authenticator">Add authenticator app</MudButton>
    }
    else
    {
        <MudButton Href="/account/two-factor-authentication/enable-authenticator" Color="Color.Primary" Variant="Variant.Filled">Set up authenticator app</MudButton>
        <MudButton Href="/account/two-factor-authentication/reset-authenticator" Color="Color.Secondary" Variant="Variant.Filled">Reset authenticator app</MudButton>
    }
}
else
{
    <div class="alert alert-danger">
        <strong>Privacy and cookie policy have not been accepted.</strong>
        <p>You must accept the policy before you can enable two factor authentication.</p>
    </div>
}

@code {
    private bool canTrack;
    private bool hasAuthenticator;
    private int recoveryCodesLeft;
    private bool is2faEnabled;
    private bool isMachineRemembered;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(user) is not null;
        is2faEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.",
            HttpContext);
    }

}