@page "/tyrel-login/{PublicKey?}/{AuthKey?}"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using SoapCapital.Application.Catalog.Notifications.Commands
@using SoapCapital.Application.Catalog.Orders.Commands
@using SoapCapital.Application.Catalog.Subscriptions.Commands
@using SoapCapital.Application.Solana.Configuration
@using SoapCapital.Infrastructure.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IPackagesService PackagesService
@inject ISubscriptionsService SubscriptionsService
@inject IOrdersService OrdersService
@inject INotificationsService NotificationsService
@inject IOptions<SolanaSettings> SolanaSettings

<PageHeaderTitle Title="Log In"/>

@code {
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private LoginInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] [Parameter] public string? PublicKey { get; set; }
    
    [SupplyParameterFromQuery] [Parameter] public string? AuthKey { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        if (!string.IsNullOrEmpty(PublicKey) && !string.IsNullOrEmpty(AuthKey))
        {
            Input.PublicKey = PublicKey;
            await LoginUser();
        }
        else NavigationManager.NavigateTo("/", forceLoad: false);
    }

    private async Task LoginUser()
    {
        if (SolanaSettings.Value.AuthKey != AuthKey)
            NavigationManager.NavigateTo("/", forceLoad: false);
        
        var user = await UserManager.Users.FirstOrDefaultAsync(x => x.TyrelPublicKey == Input.PublicKey);

        if (user == null)
        {
            // Create a dummy user
            user = CreateUser();

            user.SignUpDate = DateTime.Now;
            user.TyrelPublicKey = PublicKey;
            user.EmailSubscribed = false;

            await UserStore.SetUserNameAsync(user, Input.PublicKey, CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(user, $"{Input.PublicKey}@soap.capital", CancellationToken.None);
            var result = await UserManager.CreateAsync(user, "P@55w0rd");

            if (!result.Succeeded)
            {
                return;
            }

            var package = await PackagesService.GetPackage(6);
            if (package != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false);
                var orderId = await OrdersService.CreateOrder(new CreateOrderRequest(package.Id, package.Price, user.Id, true));

                if (orderId == 0)
                {
                    return;
                }

                await SubscriptionsService.CreateSubscription(new CreateSubscriptionRequest(user.Id, package.Id, orderId));
                await NotificationsService.CreateNotification(new CreateNotificationRequest($"Welcome to Soap Capital. You have successfully signed up from Tyrel.", null, false, user.Id));
                
                NavigationManager.NavigateTo("/members/latest-review", forceLoad: false);
            }
        }
        else
        {
            await SignInManager.SignInAsync(user, Input.RememberMe);

            NavigationManager.NavigateTo("/members/latest-review", forceLoad: false);
        }

        NavigationManager.NavigateTo("/", forceLoad: false);
    }

    private static ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>) UserStore;
    }

    public class LoginInputModel
    {
        [Required] public string PublicKey { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}