@page "/account/password"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using SoapCapital.Infrastructure.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<SectionContent SectionName="PageHeaderTitle">
    <PageHeaderTitle Title="Password"/>
</SectionContent>

<StatusMessage Message="@message"/>

<EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
    <MudGrid Spacing="1">
        <DataAnnotationsValidator/>

        <MudItem xs="12">
            <div class="mud-input-control mud-input-input-control">
                <div class="mud-input-control-input-container">
                    <div class="mud-input mud-input-text  mud-input-outlined mud-shrink">
                        <InputText @bind-Value="@Input.OldPassword" type="password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="password" aria-required="true" placeholder="Current Password"/>
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <label class="mud-input-label mud-input-label-animated mud-input-label-text mud-input-label-inputcontrol" for="@Input.OldPassword">Current Password</label>
                </div>
            </div>

            <ValidationMessage For="() => Input.OldPassword" class="mud-input-helper-text mud-input-error"/>
        </MudItem>
        <MudItem xs="12">
            <div class="mud-input-control mud-input-input-control">
                <div class="mud-input-control-input-container">
                    <div class="mud-input mud-input-text  mud-input-outlined mud-shrink">
                        <InputText @bind-Value="@Input.NewPassword" type="password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="password" aria-required="true" placeholder="New Password"/>
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <label class="mud-input-label mud-input-label-animated mud-input-label-text mud-input-label-inputcontrol" for="@Input.NewPassword">New Password</label>
                </div>
            </div>

            <ValidationMessage For="() => Input.NewPassword" class="mud-input-helper-text mud-input-error"/>
        </MudItem>
        <MudItem xs="12">
            <div class="mud-input-control mud-input-input-control">
                <div class="mud-input-control-input-container">
                    <div class="mud-input mud-input-text  mud-input-outlined mud-shrink">
                        <InputText @bind-Value="@Input.ConfirmPassword" type="password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="password" aria-required="true" placeholder="Confirm Password"/>
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <label class="mud-input-label mud-input-label-animated mud-input-label-text mud-input-label-inputcontrol" for="@Input.ConfirmPassword">Confirm Password</label>
                </div>
            </div>

            <ValidationMessage For="() => Input.ConfirmPassword" class="mud-input-helper-text mud-input-error"/>
        </MudItem>

        <MudItem xs="12" Class="d-flex justify-center">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" StartIcon="@Icons.Material.Filled.Login" Style="width: 100%;">
                Save
            </MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}